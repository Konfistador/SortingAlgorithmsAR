Index: src/main/java/utils/AlgorithmTester.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>package utils;\n\nimport algorithms.*;\n\nimport java.lang.reflect.Type;\nimport java.time.Duration;\nimport java.time.Instant;\nimport java.util.Objects;\nimport java.util.Random;\n\npublic class AlgorithmTester {\n    Random randomizer = new Random();\n    Algorithm sorter;\n    boolean printRequired;\n    int[] numericalCollectionForSorting;\n    char[]charCollectionForSorting;\n    ArrayGenerator generator = new ArrayGenerator();\n\n    public AlgorithmTester(boolean printRequired) {\n        this.printRequired = printRequired;\n    }\n\n\n    public AnalysisReport executeTest(CollectionSize sizeOfCollection, Type collectionType) {\n        if (Objects.isNull(sorter))\n            throw new IllegalArgumentException(\"Sorter required, before starting the Experiment.\");\n\n        if(collectionType == int.class){\n            this.numericalCollectionForSorting = generator.generateNumericalArray((int) sizeOfCollection.numeralExpression);\n        }else if(collectionType == char.class){\n            this.charCollectionForSorting = generator.generateCharacterArray((int)sizeOfCollection.numeralExpression);\n        }\n\n\n        if (this.printRequired) {\n            System.out.println(\"Collection prior sorting: \");\n            printArr(numericalCollectionForSorting);\n        }\n\n        Instant startMoment = Instant.now();\n        sorter.execute(numericalCollectionForSorting);\n        Instant end = Instant.now();\n\n        if (this.printRequired) {\n            System.out.println(\"Collection after sorting: \");\n            printArr(numericalCollectionForSorting);\n        }\n        return createReport(sorter.getClass(), Duration.between(startMoment, end), (int) sizeOfCollection.numeralExpression, numericalCollectionForSorting.getClass().getComponentType());\n    }\n\n    public AnalysisReport executeTest(SorterType sorterSelected, CollectionSize collectionSize, Type collectionType) {\n        setSorter(sorterSelected.sorter);\n        return this.executeTest(collectionSize, collectionType);\n    }\n\n    private int[] generateArray(Random randomizer, int sizeOfArray) {\n        int[] inputArray = new int[sizeOfArray];\n\n        for (int i = 0; i < inputArray.length; i++) {\n            inputArray[i] = randomizer.nextInt();\n        }\n        return inputArray;\n    }\n\n    public void printArr(int[] inputArray) {\n        System.out.println(\"[\");\n        for (int j : inputArray) {\n            System.out.println(\"    \" + j);\n        }\n        System.out.println(\"]\");\n    }\n\n    public void setSorter(Algorithm sorter) {\n        this.sorter = sorter;\n    }\n\n    public AnalysisReport createReport(Class sorterUsed, Duration timeComplexity, int sizeOfCollection , Type collectionType) {\n        return new AnalysisReport(sorterUsed, timeComplexity, sizeOfCollection, collectionType);\n    }\n\n    public enum CollectionSize {\n\n        EXTRA_EXTRA_SMALL(1, Math.pow(2, 1)),\n        EXTRA_SMALL(2, Math.pow(2, 2)),\n        SMALL(3, Math.pow(2, 3)),\n        MEDIUM_SMALL(4, Math.pow(2, 4)),\n        MEDIUM(5, Math.pow(2, 5)),\n        MEDIUM_LARGE(6, Math.pow(2, 6)),\n        LARGE(7, Math.pow(2, 7)),\n        EXTRA_LARGE(8, Math.pow(2, 8)),\n        BROAD(9, Math.pow(2, 9)),\n        EXTENSIVE(10, Math.pow(2, 10)),\n        GIANT(11, Math.pow(2, 11)),\n        GIGANTIC(12, Math.pow(2, 12)),\n        SPACIOUS(13, Math.pow(2, 13)),\n        IMMENSE(14, Math.pow(2, 14)),\n        HYPER(15, Math.pow(2, 15)),\n        JUMBO(16, Math.pow(2, 16)),\n        COSMIC(17, Math.pow(2, 17)),\n        ASTRONOMICAL(18, Math.pow(2, 18)),\n        ENORMOUS(19, Math.pow(2, 19));\n\n\n        public final int sizeChartPosition;\n        public final double numeralExpression;\n\n        CollectionSize(int sizeChartPosition, double pow) {\n            this.numeralExpression = pow;\n            this.sizeChartPosition = sizeChartPosition;\n        }\n    }\n\n    public enum SorterType {\n        BOGOSORT(new BogoSort()),\n        BUBBLESORT(new BubbleSort()),\n        HEAPSORT(new HeapSort()),\n        QUICKSORT(new QuickSort()),\n        SELECTIONSORT(new SelectionSort());\n\n        public final Algorithm sorter;\n\n        SorterType(Algorithm sorter) {\n            this.sorter = sorter;\n        }\n    }\n\n    static class ArrayGenerator {\n        private Random randomizer = new Random();\n\n        int[] generateNumericalArray(int sizeOfArray) {\n            int[] inputArray = new int[sizeOfArray];\n\n            for (int i = 0; i < inputArray.length; i++) {\n                inputArray[i] = randomizer.nextInt();\n            }\n            return inputArray;\n        }\n\n        char[] generateCharacterArray(int sizeOfArray) {\n            char[] outputArr = new char[sizeOfArray];\n\n            for (int i = 0; i < outputArr.length; i++) {\n                outputArr[i] = (char) (randomizer.nextInt(sizeOfArray) + 97);\n            }\n            return outputArr;\n        }\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/utils/AlgorithmTester.java b/src/main/java/utils/AlgorithmTester.java
--- a/src/main/java/utils/AlgorithmTester.java	(revision 09371acc142a4d966e11ae510410c9b04aa2d040)
+++ b/src/main/java/utils/AlgorithmTester.java	(date 1643816170593)
@@ -97,8 +97,7 @@
         HYPER(15, Math.pow(2, 15)),
         JUMBO(16, Math.pow(2, 16)),
         COSMIC(17, Math.pow(2, 17)),
-        ASTRONOMICAL(18, Math.pow(2, 18)),
-        ENORMOUS(19, Math.pow(2, 19));
+        ASTRONOMICAL(18, Math.pow(2, 18));
 
 
         public final int sizeChartPosition;
Index: src/main/java/Main.java
IDEA additional info:
Subsystem: com.intellij.openapi.diff.impl.patch.BaseRevisionTextPatchEP
<+>import algorithms.*;\nimport utils.*;\n\nimport java.io.IOException;\nimport java.util.ArrayList;\nimport java.util.Collection;\nimport java.util.List;\n\npublic class Main {\n\n    public static void main(String[] args) throws IOException {\n        AlgorithmTester tester = new AlgorithmTester(false);\n        ReportWizard reportWizard = new ReportWizard();\n        List<AnalysisReport> reports = new ArrayList<>();\n\n        reports.addAll(testRun(AlgorithmTester.SorterType.QUICKSORT, tester));\n        reports.addAll(testRun(AlgorithmTester.SorterType.HEAPSORT, tester));\n       // reports.addAll(testRun(AlgorithmTester.SorterType.BUBBLESORT, tester));\n       // reports.addAll(testRun(AlgorithmTester.SorterType.SELECTIONSORT, tester));\n        // reports.add(tester.executeTest(AlgorithmTester.SorterType.SELECTIONSORT, AlgorithmTester.CollectionSize.SPACIOUS));\n        // reports.add(tester.executeTest(AlgorithmTester.SorterType.QUICKSORT, AlgorithmTester.CollectionSize.LARGE));\n        reportWizard.saveReports(reports);\n\n    }\n\n    public static List<AnalysisReport> testRun(AlgorithmTester.SorterType sorterForTesting, AlgorithmTester tester) {\n        var returnableList = new ArrayList<AnalysisReport>();\n        var allSizeValues = AlgorithmTester.CollectionSize.values();\n\n        for (int i = 0; i < allSizeValues.length; i++) {\n            returnableList.add(tester.executeTest(sorterForTesting, allSizeValues[i], int.class));\n            //returnableList.add(tester.executeTest(sorterForTesting, allSizeValues[i], char.class));\n        }\n        return returnableList;\n    }\n}\n
Subsystem: com.intellij.openapi.diff.impl.patch.CharsetEP
<+>UTF-8
===================================================================
diff --git a/src/main/java/Main.java b/src/main/java/Main.java
--- a/src/main/java/Main.java	(revision 09371acc142a4d966e11ae510410c9b04aa2d040)
+++ b/src/main/java/Main.java	(date 1643816209637)
@@ -15,8 +15,8 @@
 
         reports.addAll(testRun(AlgorithmTester.SorterType.QUICKSORT, tester));
         reports.addAll(testRun(AlgorithmTester.SorterType.HEAPSORT, tester));
-       // reports.addAll(testRun(AlgorithmTester.SorterType.BUBBLESORT, tester));
-       // reports.addAll(testRun(AlgorithmTester.SorterType.SELECTIONSORT, tester));
+        reports.addAll(testRun(AlgorithmTester.SorterType.BUBBLESORT, tester));
+        reports.addAll(testRun(AlgorithmTester.SorterType.SELECTIONSORT, tester));
         // reports.add(tester.executeTest(AlgorithmTester.SorterType.SELECTIONSORT, AlgorithmTester.CollectionSize.SPACIOUS));
         // reports.add(tester.executeTest(AlgorithmTester.SorterType.QUICKSORT, AlgorithmTester.CollectionSize.LARGE));
         reportWizard.saveReports(reports);
